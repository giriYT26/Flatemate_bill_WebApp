1Ô∏è‚É£ MethodView

Think of it like this:
Normally in Flask you write routes like this:

@app.route("/hello", methods=["GET", "POST"])
def hello():
    if request.method == "GET":
        return "This is GET"
    elif request.method == "POST":
        return "This is POST"


With MethodView, instead of writing one big function, you can split GET, POST, PUT, DELETE into separate functions inside a class:
it's a class based view that dispatches request methods to the corresponding class method 

#Here this code use the MethodView class for flask.views
from flask import Flask, request
from flask.views import MethodView

app = Flask(__name__)

class HelloView(MethodView):
    def get(self):
        return "This is GET"

    def post(self):
        return "This is POST"

app.add_url_rule("/hello", view_func=HelloView.as_view("hello_view"))

app.run()


üîπ Why use it?
It‚Äôs cleaner when your route has to handle many HTTP methods.
Instead of one messy if request.method == ..., you just write separate methods in a class.

2Ô∏è‚É£ WTForms

    What is a Form and WTForms(InShort)
    - Forms are data-entry structures that let users input and submit data (like login, signup, or payment forms).
    - In WTForms, a Form is a Python class that defines those inputs in code and handles validation.

    General meaning (HTML/Web)
    - A form is simply a way for a user to enter data and send it to the server
        Sample HTML Form
        <form method="post" action="/submit">
            <label for="amt">Bill Amount:</label>
            <input type="text" id="amt" name="amt">
            <input type="submit" value="Submit">
        </form>
        Here:
        - <form> is the container.
        - <input> is the field where the user types.
        - When submitted, the browser sends the values to the server.
    In Python WTForms
        WTForms abstracts this idea into Python classes
            - Form (singular, capital F) ‚Üí a Python class that represents a whole HTML form.
            - Inside it, you define fields (like StringField, IntegerField, PasswordField).
            - Each field in the Python class becomes an <input> (or similar) in HTML.
        
